### NEW EFFECTS ###

dragatus_PCB_liberate_family_and_friends_effect = {
	save_temporary_scope_as = dragatus_current_ruler_scope
	# reclaim former spouse - Prisoner Marriage mod compatibility section
	every_courtier = {
		save_temporary_scope_as = dragatus_current_courtier_scope
		if = {
			limit = { 
				is_imprisoned = no
				reverse_has_opinion_modifier = {
					target = scope:attacker
					modifier = dragatus_rightful_spouse_opinion
				}
				NOT = {
					any_spouse = { this = scope:attacker }
				}
			}
			# Cancel bad marriages and concubinage.
			every_spouse = {
				divorce = scope:dragatus_current_courtier_scope
				trigger_event = marriage_interaction.0041
			}
			if = {
				limit = { 
					is_concubine = yes
				}
				concubinist = {
					remove_concubine = prev
				}
			}
			if = {
				limit = { 
					scope:attacker = {
						is_female = yes
						allowed_more_spouses = yes
					}
				}
				marry_matrilineal = scope:attacker
			}
			else_if = {
				limit = { 
					scope:attacker = {
						allowed_more_spouses = yes
					}
				}
				marry = scope:attacker
			}
			else_if = {
				limit = { # Probably excessive, but better safe than sorry.
					is_ruler = no
				}
				scope:attacker = {
					add_courtier = scope:dragatus_current_courtier_scope
				}
			}
		}
	}
	every_prisoner = {
		save_temporary_scope_as = dragatus_current_courtier_scope
		if = {
			limit = { 
				reverse_has_opinion_modifier = {
					target = scope:attacker
					modifier = dragatus_rightful_spouse_opinion
				}
				NOT = {
					any_spouse = { this = scope:attacker }
				}
			}
			# Freeeeeeedooooooooom!!!!!
			# But only if imprisoned inside defender's or attacker's realm.
			if = {
				limit = { 
					is_imprisoned = yes
					OR = {
						imprisoner = { top_liege = { this = scope:defender } }
						imprisoner = { top_liege = { this = scope:attacker } }
					}
				}
				release_from_prison = yes
			}
			# Cancel bad marriages and concubinage.
			every_spouse = {
				divorce = scope:dragatus_current_courtier_scope
				trigger_event = marriage_interaction.0041
			}
			if = {
				limit = { 
					is_concubine = yes
				}
				concubinist = {
					remove_concubine = prev
				}
			}
			if = {
				limit = { 
					scope:attacker = {
						is_female = yes
						allowed_more_spouses = yes
					}
				}
				marry_matrilineal = scope:attacker
			}
			else_if = {
				limit = { 
					scope:attacker = {
						allowed_more_spouses = yes
					}
				}
				marry = scope:attacker
			}
			else_if = {
				limit = { # Probably excessive, but better safe than sorry.
					is_ruler = no
				}
				scope:attacker = {
					add_courtier = scope:dragatus_current_courtier_scope
				}
			}
		}
	}
	# reclaim former spouse
	every_courtier = {
		save_temporary_scope_as = dragatus_current_courtier_scope
		if = {
			limit = { 
				is_imprisoned = no
				any_former_spouse = { this = scope:attacker }
				NOR = {
					# These cases have already been handled.
					reverse_has_opinion_modifier = {
						target = scope:attacker
						modifier = dragatus_rightful_spouse_opinion
					}
					# We're making an educated guess that a former spouse who hates the attacker for divorcing them is actually not a stolen spouse.
					has_opinion_modifier = {
							target = scope:attacker
							modifier = divorced_me_opinion
					}
					# The divorce opinion penalty lasts for 50 years (unmodded), so this should be a fairly safe guess.
					# But it can produce bugs if a divorced spouse is still alive 50+ years after the divorce.
					# So we add an age check. You can only get back spouses that are less than 66 years old.
					age >= 66 # 16+50 ; default minimum age for marriage & divorce + 50 years for opinion penalty to expire
				}
				NOT = { # Probably excessive, but just in case.
					any_spouse = { this = scope:attacker }
				}
			}
			every_spouse = {
				divorce = scope:dragatus_current_courtier_scope
				trigger_event = marriage_interaction.0041
			}
			if = {
				limit = { 
					is_concubine = yes
				}
				concubinist = {
					remove_concubine = prev
				}
			}
			if = {
				limit = { 
					scope:attacker = {
						is_female = yes
						allowed_more_spouses = yes
					}
				}
				marry_matrilineal = scope:attacker
			}
			else_if = {
				limit = { 
					scope:attacker = {
						allowed_more_spouses = yes
					}
				}
				marry = scope:attacker
			}
			else_if = {
				limit = { # Probably excessive, but better safe than sorry.
					is_ruler = no
				}
				scope:attacker = {
					add_courtier = scope:dragatus_current_courtier_scope
				}
			}
		}
	}
	every_prisoner = {
		save_temporary_scope_as = dragatus_current_courtier_scope
		if = {
			limit = { 
				any_former_spouse = { this = scope:attacker }
				NOR = {
					# These cases have already been handled.
					reverse_has_opinion_modifier = {
						target = scope:attacker
						modifier = dragatus_rightful_spouse_opinion
					}
					# We're making an educated guess that a former spouse who hates the attacker for divorcing them is actually not a stolen spouse.
					has_opinion_modifier = {
							target = scope:attacker
							modifier = divorced_me_opinion
					}
					# The divorce opinion penalty lasts for 50 years (unmodded), so this should be a fairly safe guess.
					# But it can produce bugs if a divorced spouse is still alive 50+ years after the divorce.
					# So we add an age check. You can only get back spouses that are less than 66 years old.
					age >= 66 # 16+50 ; default minimum age for marriage & divorce + 50 years for opinion penalty to expire
				}
				NOT = { # Probably excessive, but just in case.
					any_spouse = { this = scope:attacker }
				}
			}
			# Freeeeeeedooooooooom!!!!!
			# But only if imprisoned inside defender's or attacker's realm.
			if = {
				limit = { 
					is_imprisoned = yes
					OR = {
						imprisoner = { top_liege = scope:defender }
						imprisoner = { top_liege = scope:attacker }
					}
				}
				release_from_prison = yes
			}
			every_spouse = {
				divorce = scope:dragatus_current_courtier_scope
				trigger_event = marriage_interaction.0041
			}
			if = {
				limit = { 
					is_concubine = yes
				}
				concubinist = {
					remove_concubine = prev
				}
			}
			if = {
				limit = { 
					scope:attacker = {
						is_female = yes
						allowed_more_spouses = yes
					}
				}
				marry_matrilineal = scope:attacker
			}
			else_if = {
				limit = { 
					scope:attacker = {
						allowed_more_spouses = yes
					}
				}
				marry = scope:attacker
			}
			else_if = {
				limit = { # Probably excessive, but better safe than sorry.
					is_ruler = no
				}
				scope:attacker = {
					add_courtier = scope:dragatus_current_courtier_scope
				}
			}
		}
	}
	# reclaim former concubine
	every_courtier = {
		save_temporary_scope_as = dragatus_current_courtier_scope
		if = {
			limit = {
				is_imprisoned = no
				NOR = {
					# These cases have already been handled.
					reverse_has_opinion_modifier = {
						target = scope:attacker
						modifier = dragatus_rightful_spouse_opinion
					}
					# Probably excessive, but just in case.
					any_spouse = { this = scope:attacker }
				}
				any_former_concubinist = { this = scope:attacker }
				# We're making an educated guess that a former concubine who was set aside isn't someone the attacker wants to get back.
				NOR = {
					has_opinion_modifier = {
						target = scope:attacker
						modifier = set_me_aside_opinion
					}
					# minimum age for concubinage = 16, duration of set aside opinion penalty = 25, 16+25=41
					# Former concubines over this age may have been set aside, but opinion penalty expired.
					age >= 41
				}
				# Former spouses without the divorce opinion penalty have already been processed.
				OR = {
					has_opinion_modifier = {
							target = scope:attacker
							modifier = divorced_me_opinion
					}
					NOT = { any_former_spouse = { this = scope:attacker } }
				}
			}
			every_spouse = {
				divorce = scope:dragatus_current_courtier_scope
				trigger_event = marriage_interaction.0041
			}
			if = {
				limit = { 
					is_concubine = yes
				}
				concubinist = {
					remove_concubine = prev
				}
			}
			# Make currently scoped courtier into attacker's concubine again if possible. If not then just move them back to court.
			scope:attacker = {
				if = {
					limit = {
						allowed_concubines = yes
						allowed_more_concubines = yes
					}
					make_concubine = scope:dragatus_current_courtier_scope
				}
				else_if = {
					limit = { # Probably excessive, but better safe than sorry.
						is_ruler = no
					}
					add_courtier = scope:dragatus_current_courtier_scope
				}
			}
		}
	}
	every_prisoner = {
		save_temporary_scope_as = dragatus_current_courtier_scope
		if = {
			limit = {
				NOR = {
					# These cases have already been handled.
					reverse_has_opinion_modifier = {
						target = scope:attacker
						modifier = dragatus_rightful_spouse_opinion
					}
					# Probably excessive, but just in case.
					any_spouse = { this = scope:attacker }
				}
				any_former_concubinist = { this = scope:attacker }
				# We're making an educated guess that a former concubine who was set aside isn't someone the attacker wants to get back.
				NOR = {
					has_opinion_modifier = {
						target = scope:attacker
						modifier = set_me_aside_opinion
					}
					# minimum age for concubinage = 16, duration of set aside opinion penalty = 25, 16+25=41
					# Former concubines over this age may have been set aside, but opinion penalty expired.
					age >= 41
				}
				# Former spouses without the divorce opinion penalty have already been processed.
				OR = {
					has_opinion_modifier = {
							target = scope:attacker
							modifier = divorced_me_opinion
					}
					NOT = { any_former_spouse = { this = scope:attacker } }
				}
			}
				scope:attacker = { add_gold = 1 }
			# Freeeeeeedooooooooom!!!!!
			# But only if imprisoned inside defender's or attacker's realm.
			if = {
				limit = { 
					is_imprisoned = yes
					OR = {
						imprisoner = { top_liege = scope:defender }
						imprisoner = { top_liege = scope:attacker }
					}
				}
				release_from_prison = yes
			}
			every_spouse = {
				divorce = scope:dragatus_current_courtier_scope
				trigger_event = marriage_interaction.0041
			}
			if = {
				limit = { 
					is_concubine = yes
				}
				concubinist = {
					remove_concubine = prev
				}
			}
			# Make currently scoped courtier into attacker's concubine again if possible. If not then just move them back to court.
				scope:attacker = { add_gold = 2 }
			scope:attacker = {
				if = {
					limit = {
						allowed_concubines = yes
						allowed_more_concubines = yes
					}
					make_concubine = scope:dragatus_current_courtier_scope
				}
				else_if = {
					limit = { # Probably excessive, but better safe than sorry.
						is_ruler = no
					}
					add_courtier = scope:dragatus_current_courtier_scope
				}
			}
		}
	}
	# bring home forcefully recruited loved ones
	every_courtier = {
		save_temporary_scope_as = dragatus_current_courtier_scope
		if = {
			limit = { 
				# These cases have already been handled.
				NOR = {					
					reverse_has_opinion_modifier = {
						target = scope:attacker
						modifier = dragatus_rightful_spouse_opinion
					}
					any_former_concubinist = { this = scope:attacker }
					any_former_spouse = { this = scope:attacker }
				}
				# Was the character forcefully recruited?	
				OR = {
					has_opinion_modifier = {
						target = scope:dragatus_current_ruler_scope
						modifier = demanded_recruitment
					}
					has_opinion_modifier = {
						target = scope:dragatus_current_ruler_scope
						modifier = forced_me_concubine_marriage_opinion
					}
				}
				# Is this a loved one of the attacker?
				OR = {
					any_spouse = { this = scope:attacker }
					concubinist = scope:attacker
					is_close_or_extended_family_of = scope:attacker
					has_relation_friend = scope:attacker
					has_relation_best_friend = scope:attacker
					has_relation_soulmate = scope:attacker
					AND = { # Publicly known lover.
						has_relation_lover = scope:attacker
						NOT = { has_secret_relation_lover = scope:attacker }
					}
					# We're deliberately not checking every house/dynasty member to reduce impact on game performance.
					# Players presumably don't care about random dynasts anyway.
					# The exception is if the random dynast is an heir, so we do check for heirs.
					is_heir_of = scope:attacker
				}
			}
			# Freeeeeeedooooooooom!!!!!
			# But only if imprisoned inside defender's or attacker's realm.
			if = {
				limit = {
					is_imprisoned = yes
					OR = {
						imprisoner = { top_liege = scope:defender }
						imprisoner = { top_liege = scope:attacker }
					}
				}
				release_from_prison = yes
			}
			# We're making an educated guess that any marriage that allows our loved one to remain in the court of the forced recruiter is bad.
			if = {
				limit = {
					# Rulers can handle their own divorces.
					is_ruler = no
				}
				every_spouse = {
					divorce = scope:dragatus_current_courtier_scope
					trigger_event = marriage_interaction.0041
				}
			}
			if = {
				limit = { 
					is_concubine = yes
				}
				concubinist = {
					remove_concubine = prev
				}
			}
			if = {
				limit = { # Probably excessive, but better safe than sorry.
					is_ruler = no
				}
				scope:attacker = {
					add_courtier = scope:dragatus_current_courtier_scope
				}
			}
		}
	}
	# free subjects and loved ones that are still imprisoned
	every_prisoner = {
		save_temporary_scope_as = dragatus_current_courtier_scope
		if = {
			limit = { 
				OR = {
					any_spouse = { this = scope:attacker }
					concubinist = scope:attacker
					liege = scope:attacker
					any_vassal = { this = scope:attacker }
					is_close_or_extended_family_of = scope:attacker
					has_relation_friend = scope:attacker
					has_relation_best_friend = scope:attacker
					has_relation_soulmate = scope:attacker
					AND = { # Publicly known lover.
						has_relation_lover = scope:attacker
						NOT = { has_secret_relation_lover = scope:attacker }
					}
					# We're deliberately not checking every house/dynasty member to reduce impact on game performance.
					# Players presumably don't care about random dynasts anyway.
					# The exception is if the random dynast is an heir, so we do check for heirs.
					is_heir_of = scope:attacker
				}
			}
			# Freeeeeeedooooooooom!!!!!
			release_from_prison = yes
			# If they don't have a court of their own and are stuck inside defender's realm, bring them home.
			if = {
				limit = {
					is_ruler = no
					top_liege = scope:defender
				}
				scope:attacker = {
					add_courtier = scope:dragatus_current_courtier_scope
				}
			}
			# Gain a hook on liberated vassal or liege.
			if = {
				limit = {
					is_ruler = yes
					OR = {
						liege = scope:attacker
						any_vassal = { this = scope:attacker }
					}
				}
				scope:attacker = {
					add_hook = {
						target = scope:dragatus_current_courtier_scope
						type = favor_hook
					}
				}
			}
		}
	}
}